---
description: 
globs: 
alwaysApply: true
---
# TypeScript Best Practices

## Core Principles

1. **Type over Interface** — Prefer `type` aliases over `interface`, use `interface` only when extending types.
2. **No Any Type** — Never use `any`, always define explicit types.
3. **Const by Default** — Prefer `const`, avoid unnecessary use of `let`.
4. **Explicit Return Types** — Always define function return types explicitly.
5. **Clear Function Signatures** — Clearly define types for function arguments and return values.
6. **No Magic Values** — Avoid magic strings or numbers, extract them into constants.
7. **Utility Types** — Leverage utility types (Partial, Pick, Omit, Record, etc.).
8. **Strict Mode** — Always enable `strict` mode in TypeScript configuration.
9. **Generic Functions** — Use generics for reusable and flexible functions.
10. **Separation of Concerns** — Separate type definitions from implementation for better readability.

## Control Flow

11. **Avoid Switch-Case** — Forbidden `switch-case` statements. Use object constants with limited cases to handle conditional logic instead.

```typescript
// ❌ Avoid
switch (status) {
  case 'loading': return <Spinner />;
  case 'error': return <Error />;
  case 'success': return <Content />;
}

// ✅ Prefer
const statusHandlers = {
  loading: () => <Spinner />,
  error: () => <Error />,
  success: () => <Content />
} as const;

return statusHandlers[status]();
```

## Type Safety

12. **Strict Null Checks** — Enable strictNullChecks to catch null/undefined errors at compile time.
13. **Discriminated Unions** — Use discriminated unions for type-safe state management and API responses.
14. **Type Guards** — Create type guard functions to safely narrow types at runtime.
15. **Assertion Functions** — Use assertion functions for runtime type validation.
16. **Const Assertions** — Use `as const` for literal types and immutable data structures.

## Advanced Types

17. **Mapped Types** — Use mapped types for transforming existing types systematically.
18. **Conditional Types** — Use conditional types for complex type logic and inference.
19. **Template Literal Types** — Use template literal types for string manipulation at type level.
20. **Index Signatures** — Use index signatures carefully, prefer Record<K, V> when possible.
21. **Branded Types** — Use branded types for domain-specific type safety (e.g., UserId, Email).
